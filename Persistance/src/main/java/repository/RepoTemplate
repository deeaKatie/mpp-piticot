package repository;
import exception.RepositoryException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.query.Query;
import java.util.*;

public class REPOTR implements IREPOTR{

    private static final Logger logger= LogManager.getLogger(REPOTR.class.getName());
    private Session session;


    public REPOTR() {
        StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure().build();
        SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();
        session = factory.openSession();
    }

    @Override
    public CLASSTR add(CLASSTR entity) {
        logger.traceEntry();
        Transaction transaction = session.beginTransaction();
        Long id = (Long) session.save(entity);
        entity.setId(id);
        transaction.commit();
        logger.traceExit();
        return entity;
    }

    @Override
    public void delete(CLASSTR entity) {
        logger.traceEntry();
        Transaction transaction = session.beginTransaction();
        session.delete(entity);
        transaction.commit();
        logger.traceExit();
    }

    @Override
    public void update(CLASSTR entity) {
        logger.traceEntry();
        Transaction transaction = session.beginTransaction();
        session.update(entity);
        transaction.commit();
        logger.traceExit();
    }

    @Override
    public CLASSTR findById(Long id) throws RepositoryException {
        logger.traceEntry();
        Transaction transaction = session.beginTransaction();
        CLASSTR entity = session.get(CLASSTR.class, id);
        transaction.commit();
        logger.traceExit();
        return entity;
    }

    @Override
    public Iterable<CLASSTR> getAll() {
        logger.traceEntry();
        Query query = session.createQuery("from CLASSTR");
        List<CLASSTR> entities = query.list();
        logger.traceExit();
        return entities;
    }

    @Override
        public CLASSTR findBy(String parameter) throws RepositoryException {
            logger.traceEntry();
            Query query = session.createQuery("from User where parameter = :p");
            query.setParameter("p", parameter);
            CLASSTR entity = (CLASSTR) query.uniqueResult();
            if (entity == null) {
                logger.error("No CLASSTR found!");
                throw new RepositoryException("No CLASSTR found!");
            }
            logger.traceExit();
            return entity;
        }

}